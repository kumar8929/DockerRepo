# Orchestration
● Complete the setup of a swarm mode cluster, with managers and worker nodes
   Docker Installation- Centos
	yum install -y yum-utils device-mapper-persistent-data lvm2
	yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ##CE since community edition(EE for enterprice)
	yum update -y
	yum install docker-ce -y
	systemctl enable docker && systemctl start docker && systemctl status docker
   Granting non privilage user savio to run docker command
	/var/run/docker.sock
	#adding the user to docker group
	usermod -aG docker savio
	Then logout and login
   Docker Swarm Cluster Setup
	#Intiate swarm cluster
		master]#docker swarm init --advertise-addr <LocalIP>
		worker]#docker swarm join --token <WorkerToken> <LocalIP>:2377	
	#Lost manager token? 
		docker swarm join-token manager
	#Lost worker token? 
		docker swarm join-token worker
	#List out the cluster nodes
		docker node ls
	Every join token is comprised of 4 distinct fields separated by dashes (-):
	PREFIX - VERSION - SWARM ID - TOKEN
		The prefix is always “SWMTKN”.
● State the differences between running a container vs running a service
	Docker run will start a single container.
	Docker service manage a group of containers (from the same image). You can scale them (start multiple containers) or update them.
● Demonstrate steps to lock a swarm cluster
	#Lock cluster init time itself
		docker swarm init --autolock
	#Lock an existing swarm cluster
		docker swarm update --autolock=true 
	#Unlock the swarm
		docker swarm unlock
	#Forget the key but have access to master?
		docker swarm unlock-key
	#Remove the lock
		docker swarm update --autolock=false
	#Update the key	
		docker swarm unlock-key --rotate
● Extend the instructions to run individual containers into running services under swarm
	#Create a service name testweb using image httpd
		docker service create --name testweb -p 80:80 httpd
	#Listout the services in the cluster
		 docker service ls
	#Remove service testweb
		docker service rm testweb
	#List the tasks of one or more services
		docker service ps testweb
	#Update the number of replicas
		docker service update --replicas 10 --detach=false  testweb
	#Update replica for multiple replicas(docker service scale)
		docker service scale --detach=false testweb=3 testweb1=3
	#Updated image to the swarm in a staged manner - 2 containers at a time with a 20 second delay in between each batch of 2.
		docker service update --image httpd:v2 --update-parallelism 2 --update-delay 20s testweb
	#Set CPU limit(there are limit and reservation)
		docker service update --limit-cpu=.5 --reserve-cpu=.75 --limit-memory=128m --reserve-memory=256m --detach=false  testweb 
	#Service in Global mode: Run application on every node
		docker service --name myweb -p 80:80 --mode global --detach=false nginx 
● Interpret the output of "docker inspect" commands
		docker service inspect --pretty <SERVICE-ID>
	# Without --pretty result will be in json
		docker image inspect <ImageName/ID>
● Convert an application deployment into a stack file using a YAML compose file with "docker stack deploy"
	#Create a service in docker swarm using docker-compose file
		docker stack deploy --compose-file docker-compose.yml mycustome-stack
● Manipulate a running stack of services
	#Deploy a new stack or update an existing stack
		docker stack deploy	
	#List stacks
		docker stack ls
	#List the tasks in the stack
		docker stack ps	
	#Remove one or more stacks
		docker stack rm
	#List the services in the stack
		docker stack services
● Increase # of replicas
	#update the number of replicas
		docker service update --replicas 10 --detach=false  testweb
	#update replica for multiple replicas(docker service scale)
		docker service scale --detach=false testweb=3 testweb1=3
● Add networks, publish ports
	Create our own Bridge network
		#list out network
			docker network ls
		#Create a docker Bridge network
			docker network create --driver=bridge --subnet=192.168.1.0/24 --gateway=192.168.1.250 --opt "com.docker.network.driver.mtu"="1501" my_bridge
		#Inspect network
			docker network inspect my_bridge
		#When you create a service it will be assigned to default bridge network
			docker run -d --name testweb -p 80:80 httpd 
		#Get IP of the container
			docker container inspect --format="{{.NeteorkSettings.Networks.bridge.IPAddress}}" testweb
		#Now testweb will be having two ips in two diff network
			docker network connect --ip=192.168.1.10 my_bridge testweb
		#Disconnect the default network
			docker network disconnect bridge testweb
	Create our own overlay Network for swarm cluster
		docker network create --driver=overlay --subnet=192.168.1.0/24 --gateway=192.168.1.100 myoverlay0
		docker network inspect myoverlay0
		docker service create --name testweb -p 80:80 --network=myoverlay0 --replicas 3 httpd #running httpd on overlay
● Mount volumes
	#Mount a dir /mnt/data in container
		docker run -d --name=myweb -p 8080:80 -v /mnt/data nginx:latest
	#Mounting host dir /opt to container dir /mnt/data
		docker run -d --name=myweb -p 8080:80 -v /opt:/mnt/data nginx:latest 
		docker run -d --mount type=bind,src=/my/webfiles,target=/usr/local/apache2/htdocs httpd
● Illustrate running a replicated vs global service
	#Service in Global mode: Run application on every node
		docker service --name myweb -p 80:80 --mode global --detach=false nginx 
● Identify the steps needed to troubleshoot a service not deploying
	- May all nodes are paused or drained,
	- we can reserve a specific amount of memory for a service.If no node in the swarm has the required amount of memory, the service remains in a pending state
	- Checking the logs
● Apply node labels to demonstrate placement of tasks
	#To check the node label
		docker node inspect --format="{{.Spec.Labels}}" <Node-ID>
			or
		docker node inspect --pretty <Node-ID>
	#Set a label node=MyWorkerNode to a node
		docker node update --label-add node=MyWorkerNode <Node-ID> 
	#Create a service to a node with label node=MyWorkerNode
		docker service create --name constraints -p 8082:80 --constraint 'node.labels.node == MyWorkerNode' --replicas 3 httpd
	#add or update a placement constraint
		docker service update --constraint-add
● Sketch how a Dockerized application communicates with legacy systems
● Paraphrase the importance of quorum in a swarm cluster
	- Swarm manager nodes use the Raft Consensus Algorithm to manage the swarm state.
	- Additional manager nodes reduce write performance because more nodes must acknowledge proposals to update the swarm state. 
	- Raft tolerates up to (N-1)/2 failures and requires a majority or quorum of (N/2)+1 members to agree on values proposed to the cluster. 
● Demonstrate the usage of templates with "docker service create"
	docker service create --name hosttempl --hostname="{{.Node.ID}}-{{.Service.Name}}" httpd
	The supported flags are the following :
		--hostname
		--mount
		--env
	Valid placeholders for the Go template are listed below:
	Placeholder		Description
	.Service.ID		Service ID
	.Service.Name	Service name
	.Service.Labels	Service labels
	.Node.ID		Node ID
	.Node.Hostname	Node Hostname
	.Task.ID		Task ID
	.Task.Name		Task name
	.Task.Slot		Task slot
