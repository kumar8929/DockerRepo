#Installation and Configuration (15% of exam)
● Demonstrate the ability to upgrade the Docker engine
● Complete setup of repo, select a storage driver, and complete installation of Dockerengine on multiple platforms
	Centos:
		yum install -y yum-utils device-mapper-persistent-data lvm2
		yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ##CE since community edition(EE for enterprice)
		yum update -y
		yum install docker-ce -y
		systemctl enable docker && systemctl start docker
		
Make another user to run docker
	/var/run/docker.sock
	#adding the user to docker group
	usermod -aG docker <user>
	Then logout and login
● Configure logging drivers (splunk, journald, etc)
	Change docker default logging(json-file)
		docker image pull httpd
		docker container run -d --name testweb httpd
		docker container inspect testweb | grep IPAddr
		docker logs testweb #to view the log now its in json format
	#Changing loging to rsyslog
	vi /etc/rsyslog.config
		#uncommant below lines
		$ModLoad imudp
		$UDPServerRun 514
	systemctl restart rsyslog
	
	vi /etc/docker/daemon.json
		{
			"log-driver": "syslog",
			"log-opts": {
				"syslog-address": "udp://LOCALIP:514"
				}
		}
	systemctl restart docker
	now you can check /var/log/messages to view the logs
● Setup swarm, configure managers, add nodes, and setup backup schedule
	Backup
	 You can back up the swarm using any manager. Use the following procedure.
		1. If the swarm has auto-lock enabled, you need the unlock key to restore the swarm from backup. 
		2. Stop Docker on the manager before backing up the data
		3. Back up the entire /var/lib/docker/swarm directory.
		4. Restart the manager.
	Restore
		Restore:
		Copy the folder to other machine same location and restart docker.
		new-mstr]# docker swarm init --force-new-cluster #you will be getting the same token		
● Create and manager user and teams
	Manage Users - https://docs.docker.com/datacenter/ucp/2.2/guides/access-control/create-and-manage-users/
	Manage Team - https://docs.docker.com/datacenter/ucp/2.2/guides/access-control/create-and-manage-teams/
● Interpret errors to troubleshoot installation issues without assistance
	If you use a daemon.json file and also pass options to the dockerd command manually or using start-up scripts, and these options conflict.
	Out Of Memory Exceptions: when containers attempt to use more memory than the system has available
	logs-/var/log/messages, /var/log/daemon.log, or /var/log/docker.log
● Outline the sizing requirements prior to installation
	UCP
	 Minimum requirements
		8GB of RAM for manager nodes or nodes running DTR
		4GB of RAM for worker nodes
		3GB of free disk space
	 Recommended production requirements
		16GB of RAM for manager nodes or nodes running DTR
		4 vCPUs for manager nodes or nodes running DTR
		25-100GB of free disk space
	DTR
	 4GB RAM
	 20-30GB DISK
● Understand namespaces, cgroups, and configuration of certificates
	Namespace
		When you run a container, Docker creates a set of namespaces for that container.
		These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.
		Docker Engine uses namespaces such as the following on Linux:
			The pid namespace: Process isolation (PID: Process ID).
			The net namespace: Managing network interfaces (NET: Networking).
			The ipc namespace: Managing access to IPC resources (IPC: InterProcess Communication).
			The mnt namespace: Managing filesystem mount points (MNT: Mount).
			The uts namespace: Isolating kernel and version identifiers. (UTS: Unix Timesharing System).
	Control groups
		A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.
	
	
● Use certificate-based client-server authentication to ensure a Docker daemon has the rights to access images on a registry
	A custom certificate is configured by creating a directory under /etc/docker/certs.d using the same name as the registry’s hostname.
	The following illustrates a configuration with custom certificates:
	/etc/docker/certs.d/        <-- Certificate directory
    └── localhost:5000          <-- Hostname:port
       ├── client.cert          <-- Client certificate
       ├── client.key           <-- Client key
       └── ca.crt               <-- Certificate authority that signed
                                    the registry certificate
● Consistently repeat steps to deploy Docker engine, UCP, and DTR on AWS and on premises in an HA config
● Complete configuration of backups for UCP and DTR
	UDCP BACKUP
	#get the id
		UCP-SRVR]#docker container run --log-driver none --rm -i --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp backup > backup.tar
		UCP-SRVR]#docker container run --log-driver none --rm -i --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp backup --id <ID> > backup.tar
	UDCP RESTORE:
		UCP-SRVR]#docker container run --log-driver none --rm -i --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp restore --id <ID> < backup.tar
	DTR BACKUP	
		docker run -i --rm docker/dtr backup --ucp-insecure-tls --ucp-url https://<url> --ucp-username <user> --ucp-password <password> > dtr-backup.tar
	DTR RESTORE
		docker run -i --rm docker/dtr restore --ucp-insecure-tls --ucp-url https://<url> --ucp-username <user> --ucp-password <password> < dtr-backup.tar
● Configure the Docker daemon to start on boot
	#Start docker daemon on boot
		systemctl enable docker